#!/usr/bin/env babel-node

import {getClient, getDefaultDirectory} from '../../../lib/stormpath'
import Organization from '../../../lib/organization/model'

let directory = null

getClient()
  .then(client => {
    return getDefaultDirectory(client)
  })
  .then(defaultDirectory => {
    directory = defaultDirectory
    return Organization.find().exec()
  })
  .then(orgs => {
    console.log(`Creating groups for ${orgs.length} organization(s)`)
    return Promise.all(orgs.map(o => createGroupForOrg(directory, o)))
  })
  .then(groups => {
    console.log(groups[0])
    console.log(`Created ${groups.length} groups`)
    process.exit()
  })
  .catch(err => {
    console.error(err)
    console.error(err.stack)
    process.exit(1)
  })

function createGroupForOrg (dir, org) {
  return new Promise((resolve, reject) => {
    dir.createGroup({ name: `organization-${org._id}` }, (err, group) => {
      if (err) {
        if (err.code === 2001) resolve(`Group exists for ${org._id}`)
        else reject(err)
      } else resolve(group)
    })
  })
}
