#!/usr/bin/env node

var async = require('async');
var AWS = require('aws-sdk');
var http = require('http');

var layerId = process.argv[2];
var opsworks = new AWS.OpsWorks();

var MINUTE = 1000 * 60;

opsworks.describeInstances({
  LayerId: layerId
}, function(err, data) {
  if (err) {
    throw err;
  } else if (!data.Instances || data.Instances.length === 0) {
    throw new Error('No instances for layer:', layerId);
  } else {

    async.each(data.Instances, function(instance, done) {
      if (instance.Status === 'online') {
        duplicateInstance(instance, function(err, data) {
          if (err) {
            done(err);
          } else {
            killInstance(instance, done);
          }
        });
      }
    }, function(err) {
      if (err) throw err;
      process.exit();
    });
  }
});

function duplicateInstance(instance, callback) {
  console.log('Duplicating instance', instance.Hostname);

  var options = {
    AutoScalingType: instance.AutoScalingType,
    AvailabilityZone: instance.AvailabilityZone,
    InstanceType: instance.InstanceType,
    LayerIds: instance.LayerIds.slice(),
    Os: instance.ReportedOs,
    RootDeviceType: instance.RootDeviceType,
    StackId: instance.StackId
  };

  opsworks.createInstance(options, function(err, newInstance) {
    if (err) {
      callback(err);
    } else {
      opsworks.startInstance(newInstance, function(err) {
        if (err) {
          callback(err);
        } else {
          waitForStatus(newInstance, 'online', function(err, data) {
            if (err) {
              callback(err);
            } else {
              waitForLiveEndpoint(data, callback);
            }
          });
        }
      });
    }
  });
}

function killInstance(instance, callback) {
  console.log('Stopping instance', instance.Hostname);

  opsworks.stopInstance({
    InstanceId: instance.InstanceId
  }, function(err, data) {
    if (err) {
      callback(err);
    } else {
      waitForStatus(instance, 'stopped', function(err) {
        if (err) {
          callback(err);
        } else {
          console.log('Deleting instance', instance.Hostname);

          opsworks.deleteInstance({
            InstanceId: instance.InstanceId
          }, callback);
        }
      });
    }
  })
}

function waitForStatus(instance, status, callback, retries) {
  console.log('Waiting for instance', instance.Hostname || instance.InstanceId, 'to be', status, '...', retries);

  opsworks.describeInstances({
    InstanceIds: [instance.InstanceId]
  }, function(err, data) {
    if (err || !data || !data.Instances || data.Instances.length === 0) {
      callback(err || new Error('Failed to find instance'));
    } else if (data.Instances[0].Status === status) {
      callback(null, data.Instances[0]);
    } else {
      retries = retries + 1 || 1;
      setTimeout(function() {
        waitForStatus(data.Instances[0], status, callback, retries);
      }, retries * MINUTE);
    }
  });
}

function waitForLiveEndpoint(instance, callback, retries) {
  console.log('Waiting for endpoint', instance.Hostname || instance.InstanceId, '...', retries);

  http.get('http://' + instance.PublicDns, function(res) {
    if (res.statusCode !== 200) {
      console.log('Status is', res.statusCode, 'retrying');
      retry();
    } else {
      callback();
    }
  }).on('error', function(err) {
    console.log('Error connecting,', err.code, ' retrying');
    retry();
  })

  function retry() {
    retries = retries + 1 || 1;
    setTimeout(function() {
      waitForLiveEndpoint(instance, callback, retries);
    }, retries * MINUTE);
  }
}
