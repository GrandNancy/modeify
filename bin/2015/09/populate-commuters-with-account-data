#!/usr/bin/env babel-node

import async from 'async'
import stormpath from 'stormpath'

import Commuter from '../../../lib/commuter/model'

const MAX = 100

initializeStormpath()
  .then(client => {
    return new Promise((resolve, reject) => {
      let moreCommuters = true
      let count = 0
      async.doWhilst(
        (cb) => {
          Commuter
            .find()
            .limit(MAX)
            .skip(MAX * count++)
            .exec()
            .then(commuters => {
              if (!commuters || commuters.length === 0) {
                moreCommuters = false
                cb()
              } else {
                return Promise.all(commuters.filter(c => !!c.account).map(c => c.syncWithAccount(client)))
              }
            })
            .then(commuters => {
              console.log(`${count}: Mapped ${commuters.length} account(s)`)
              cb(null, commuters)
            })
        },
        () => {
          return moreCommuters
        },
        (err) => {
          if (err) reject(err)
          else resolve()
        }
      )
    })
  })
  .then(() => {
    console.log(`FINISHED!`)
    process.exit()
  })
  .catch(err => {
    console.error(err)
    console.error(err.stack)
    process.exit(1)
  })

function initializeStormpath () {
  return new Promise((resolve, reject) => {
    stormpath.loadApiKey(`${__dirname}/../../../deployment/stormpath.properties`, (err, apiKey) => {
      if (err) reject(err)
      else resolve(new stormpath.Client({ apiKey }))
    })
  })
}
