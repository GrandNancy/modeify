#!/usr/bin/env node

var env = process.argv[2] || process.env.NODE_ENV || 'development';

var build = require('component-builder');
var resolve = require('component-resolver');
var component = require('../component.json');
var fs = require('fs');
var yml2js = require('js-yaml').load;
var mkdir = require('mkdirp');
var myth = require('myth');
var path = require('path');
var sqwish = require('sqwish');
var uglify = require('uglify-js');

// Convert the YAML config

var config = yml2js(fs.readFileSync(__dirname + '/../config/config.yaml', 'utf8'));

// Set the rest of the public config.

config.env = env;
for (var key in config.environments[env])
  config[key] = config.environments[env][key] || config[key] || '';

// remove unused data

delete config.environments;

// Build all

component.locals.forEach(bundle);

// Build.

function bundle(app) {
  // Build settings.

  var dest = 'assets/build/' + app;
  var development = env !== 'production';

  // mkdirp

  mkdir.sync(__dirname + '/../' + dest);

  // Builder.

  resolve({
    paths: [
      'client'
    ],
    locals: [
      app
    ]
  }, {
    development: development,
    install: true,
    out: __dirname + '/../components',
    root: __dirname + '/..',
    verbose: true
  }, function(err, tree) {
    if (err) throw err;

    build
      .scripts(tree, {
        alias: development,
        sourceMap: development,
        sourceUrl: development
      })
      .use('json', build.plugins.json())
      .use('scripts', build.plugins.js())
      .use('templates', build.plugins.string())
      .end(function(err, str) {
        if (err) throw err;
        var js = 'window.CONFIG=' + JSON.stringify(config, null, '  ') + ';\n' + build.scripts.require + '\n' +
          str + ';require("' + build.scripts.canonical(tree).canonical + '");\n';
        if (!development) js = uglify.minify(js, { fromString: true }).code;
        fs.writeFileSync(path.resolve(__dirname + '/../' + dest, 'build.js'), js);
      });

    build
      .styles(tree)
      .use('styles', build.plugins.css())
      .end(function(err, str) {
        if (err) throw err;
        var css = myth(str);
        css = css.replace(/\burl *\(([^)]+)\)/g, rewrite);
        if (!development) css = sqwish.minify(css);
        fs.writeFileSync(path.resolve(__dirname + '/../' + dest, 'build.css'), css);
      });
  });
}

function rewrite(_, url) {
  var orig = 'url("' + url + '")';
  if (isData(url)) return orig;
  return 'url("' + config.static_url + url + '")';
}

function isData(url) {
  return url.indexOf('data:') === 0;
}
