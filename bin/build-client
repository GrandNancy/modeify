#!/usr/bin/env node

var build = require('component-builder');
var resolve = require('component-resolver');
var fs = require('fs');
var htmlMinifier = require('html-minifier').minify;
var yml2js = require('js-yaml').load;
var marked = require('marked');
var mkdir = require('mkdirp');
var myth = require('myth');
var path = require('path');
var sqwish = require('sqwish');
var uglify = require('uglify-js');
var zlib = require('zlib');

var env = process.argv[2] || process.env.NODE_ENV || 'development';
var development = env === 'development';

var rootDir = __dirname + '/..';
var deploymentDir = rootDir + '/deployment';

// Convert the YAML config

var config = yml2js(fs.readFileSync(deploymentDir + '/config.yaml', 'utf8'));

// Set the rest of the public config.

config.env = env;
for (var key in config.environments[env])
  config[key] = config.environments[env][key] || config[key] || '';

delete config.environments;

var aboutPage = marked(fs.readFileSync(deploymentDir + '/about.md', 'utf8'));
var termsPage = marked(fs.readFileSync(deploymentDir + '/terms.md', 'utf8'));

// Generate message files

generateMessageFiles(rootDir + '/messages', rootDir + '/assets/build/messages');

// Build apps

['manager-app', 'planner-app'].forEach(bundle);

// HTML Minifier Options

var htmlMinifierOptions = {
  collapseWhitespace: true,
  collapseBooleanAttributes: true,
  removeEmptyAttributes: true,
  removeOptionalTags: true
};

// Build.

function bundle(app) {
  var destDir = rootDir + '/assets/build/' + app;

  // mkdirp

  mkdir.sync(destDir);

  // Builder.

  resolve({
    paths: [
      'client'
    ],
    locals: [
      app
    ]
  }, {
    dependencies: true,
    development: development,
    install: true,
    out: rootDir + '/components',
    root: rootDir,
    verbose: true
  }, function(err, tree) {
    if (err) throw err;

    build
      .scripts(tree, {
        alias: development,
        sourceMap: development,
        sourceUrl: development
      })
      .use('json', build.plugins.json())
      .use('scripts', build.plugins.js())
      .use('templates', templates({
        development: development
      }))
      .end(function(err, str) {
        if (err) throw err;

        // Add global vars first
        var globalVars = {
          config: config,
          templates: {
            about: htmlMinifier(aboutPage, htmlMinifierOptions),
            terms: htmlMinifier(termsPage, htmlMinifierOptions)
          }
        };
        var js = 'window.modeify=' + JSON.stringify(globalVars, null, '\t')  + ';\n';

        js += build.scripts.require + '\n' + str + ';require("' + build.scripts.canonical(tree).canonical + '");\n';

        if (!development) {
          js = uglify.minify(js, { fromString: true }).code;
          js = zlib.gzipSync(js);
        }

        fs.writeFileSync(path.resolve(destDir, 'build.js'), js);
      });

    build
      .styles(tree)
      .use('styles', build.plugins.css())
      .end(function(err, str) {
        if (err) throw err;
        var css = myth(str);
        css = css.replace(/\burl *\(([^)]+)\)/g, rewrite);

        if (!development) {
          css = sqwish.minify(css);
          css = zlib.gzipSync(css);
        }

        fs.writeFileSync(path.resolve(destDir, 'build.css'), css);
      });
  });
}

function rewrite(_, url) {
  var orig = 'url("' + url + '")';
  if (isData(url)) return orig;
  return 'url("' + config.static_url + url + '")';
}

function isData(url) {
  return url.indexOf('data:') === 0;
}

function templates(options) {
  return function(file, done) {
    file.read(function (err, string) {
      if (err) return done(err);
      if (file.extension === 'md') string = marked(string);

      file.string = JSON.stringify(htmlMinifier(string, htmlMinifierOptions));
      file.define = true;
      done();
    });
  };
}

function generateMessageFiles(messagesPath, destinationPath) {
  mkdir.sync(destinationPath);
  fs.readdir(messagesPath, function(err, files) {
    if (err) throw err;
    files.forEach(function(filename) {
      var lang = filename.split('.')[0];
      fs.readFile(messagesPath + '/' + filename, {
        encoding: 'utf8'
      }, function(err, yml) {
        if (err) throw err;
        var messages = yml2js(yml);
        var data = 'window.MESSAGES=' + JSON.stringify(messages) + ';';
        fs.writeFileSync(destinationPath + '/' + lang + '.js', data, {
          encoding: 'utf8'
        }, function(err) {
          if (err) throw err;
        });
      });
    });
  });
}