#!/usr/bin/env node

var env = process.argv[2] || process.env.NODE_ENV || 'development';

var Builder = require('component-builder');
var component = require('../component.json');
var fs = require('fs');
var yml2js = require('js-yaml').load;
var mkdir = require('mkdirp');
var myth = require('myth');
var read = fs.readFileSync;
var resolve = require('path').resolve;
var sqwish = require('sqwish');
var uglify = require('uglify-js');
var write = fs.writeFileSync;

// Convert the YAML config

var config = yml2js(read(__dirname + '/../config/config.yaml', 'utf8'));

// Set the rest of the public config.

config.env = env;
for (var key in config.environments[env])
  config[key] = config.environments[env][key] || config[key] || '';

// remove unused data

delete config.environments;

// Build all

component.local.forEach(build);

// Build.

function build(bundle) {
  // Build settings.

  var dest = 'assets/build/' + bundle;
  var production = env === 'production';

  // Builder.

  var builder = new Builder(__dirname + '/..');
  builder.config.local = [bundle];

  builder.copyAssetsTo(__dirname + '/../' + dest);
  builder.copyFiles(true);

  if (!production) {
    builder.development(true);
    builder.addSourceURLs(true);
  }

  builder.build(function(err, res) {
    if (err) throw err;
    mkdir.sync(__dirname + '/../' + dest);

    if (res.js) {
      var js = 'window.CONFIG=' + JSON.stringify(config, null, '  ') + ';' + res.require +
        res.js + ';require("' + bundle + '");';
      write(resolve(__dirname + '/../' + dest, 'build.js'), js);
    }

    if (res.css) {
      var css = myth(res.css);
      css = css.replace(/\burl *\(([^)]+)\)/g, rewrite);
      if (production) css = sqwish.minify(css);
      write(resolve(__dirname + '/../' + dest, 'build.css'), css);
    }
  });

  function rewrite(_, url) {
    var orig = 'url("' + url + '")';
    if (isData(url)) return orig;
    return 'url("' + config.static_url + url + '")';
  }

  function isData(url) {
    return url.indexOf('data:') === 0;
  }
}
